================================================================================================
aggregate without grouping
================================================================================================

OpenJDK 64-Bit Server VM 1.8.0_181-b13 on Linux 3.10.0-862.3.2.el7.x86_64
Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz
agg w/o group:                           Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative
------------------------------------------------------------------------------------------------
agg w/o group wholestage off                66096 / 71975         31.7          31.5       1.0X
agg w/o group wholestage on                   1213 / 1222       1728.8           0.6      54.5X


================================================================================================
stat functions
================================================================================================

OpenJDK 64-Bit Server VM 1.8.0_181-b13 on Linux 3.10.0-862.3.2.el7.x86_64
Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz
stddev:                                  Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative
------------------------------------------------------------------------------------------------
stddev wholestage off                         8624 / 8744         12.2          82.2       1.0X
stddev wholestage on                          1279 / 1284         82.0          12.2       6.7X

OpenJDK 64-Bit Server VM 1.8.0_181-b13 on Linux 3.10.0-862.3.2.el7.x86_64
Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz
kurtosis:                                Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative
------------------------------------------------------------------------------------------------
kurtosis wholestage off                     40576 / 40642          2.6         387.0       1.0X
kurtosis wholestage on                        1364 / 1379         76.8          13.0      29.7X


================================================================================================
aggregate with linear keys
================================================================================================

OpenJDK 64-Bit Server VM 1.8.0_181-b13 on Linux 3.10.0-862.3.2.el7.x86_64
Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz
Aggregate w keys:                        Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative
------------------------------------------------------------------------------------------------
codegen = F                                   9427 / 9541          8.9         112.4       1.0X
codegen = T hashmap = F                       4635 / 4659         18.1          55.3       2.0X
codegen = T hashmap = T                       1265 / 1325         66.3          15.1       7.5X


================================================================================================
aggregate with randomized keys
================================================================================================

OpenJDK 64-Bit Server VM 1.8.0_181-b13 on Linux 3.10.0-862.3.2.el7.x86_64
Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz
Aggregate w keys:                        Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative
------------------------------------------------------------------------------------------------
codegen = F                                 10951 / 11038          7.7         130.6       1.0X
codegen = T hashmap = F                       6440 / 6510         13.0          76.8       1.7X
codegen = T hashmap = T                       2368 / 2386         35.4          28.2       4.6X


================================================================================================
aggregate with string key
================================================================================================

OpenJDK 64-Bit Server VM 1.8.0_181-b13 on Linux 3.10.0-862.3.2.el7.x86_64
Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz
Aggregate w string key:                  Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative
------------------------------------------------------------------------------------------------
codegen = F                                   5092 / 5138          4.1         242.8       1.0X
codegen = T hashmap = F                       3512 / 3530          6.0         167.5       1.4X
codegen = T hashmap = T                       2586 / 2608          8.1         123.3       2.0X


================================================================================================
aggregate with decimal key
================================================================================================

OpenJDK 64-Bit Server VM 1.8.0_181-b13 on Linux 3.10.0-862.3.2.el7.x86_64
Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz
Aggregate w decimal key:                 Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative
------------------------------------------------------------------------------------------------
codegen = F                                   3203 / 3284          6.5         152.7       1.0X
codegen = T hashmap = F                       1667 / 1682         12.6          79.5       1.9X
codegen = T hashmap = T                        593 /  595         35.4          28.3       5.4X


================================================================================================
aggregate with multiple key types
================================================================================================

OpenJDK 64-Bit Server VM 1.8.0_181-b13 on Linux 3.10.0-862.3.2.el7.x86_64
Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz
Aggregate w multiple keys:               Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative
------------------------------------------------------------------------------------------------
codegen = F                                   7449 / 7507          2.8         355.2       1.0X
codegen = T hashmap = F                       5264 / 5301          4.0         251.0       1.4X
codegen = T hashmap = T                       3955 / 3987          5.3         188.6       1.9X


================================================================================================
max function bytecode size of wholestagecodegen
================================================================================================

OpenJDK 64-Bit Server VM 1.8.0_181-b13 on Linux 3.10.0-862.3.2.el7.x86_64
Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz
max function bytecode size:              Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative
------------------------------------------------------------------------------------------------
codegen = F                                    638 /  661          1.0         973.1       1.0X
codegen = T hugeMethodLimit = 10000            411 /  448          1.6         626.5       1.6X
codegen = T hugeMethodLimit = 1500             664 /  688          1.0        1013.7       1.0X


================================================================================================
cube
================================================================================================

OpenJDK 64-Bit Server VM 1.8.0_181-b13 on Linux 3.10.0-862.3.2.el7.x86_64
Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz
cube:                                    Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative
------------------------------------------------------------------------------------------------
cube wholestage off                           3170 / 3174          1.7         604.6       1.0X
cube wholestage on                            1309 / 1339          4.0         249.6       2.4X


================================================================================================
hash and BytesToBytesMap
================================================================================================

OpenJDK 64-Bit Server VM 1.8.0_181-b13 on Linux 3.10.0-862.3.2.el7.x86_64
Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz
BytesToBytesMap:                         Best/Avg Time(ms)    Rate(M/s)   Per Row(ns)   Relative
------------------------------------------------------------------------------------------------
UnsafeRowhash                                  329 /  331         63.7          15.7       1.0X
murmur3 hash                                   168 /  168        124.9           8.0       2.0X
fast hash                                       84 /   86        248.2           4.0       3.9X
arrayEqual                                     193 /  193        108.8           9.2       1.7X
Java HashMap (Long)                            145 /  148        144.8           6.9       2.3X
Java HashMap (two ints)                        149 /  153        141.1           7.1       2.2X
Java HashMap (UnsafeRow)                       824 /  846         25.4          39.3       0.4X
LongToUnsafeRowMap (opt=false)                 461 /  464         45.5          22.0       0.7X
LongToUnsafeRowMap (opt=true)                  126 /  127        165.9           6.0       2.6X
BytesToBytesMap (off Heap)                     920 /  929         22.8          43.9       0.4X
BytesToBytesMap (on Heap)                      906 /  913         23.1          43.2       0.4X
Aggregate HashMap                               56 /   57        371.7           2.7       5.8X


